https://school.programmers.co.kr/learn/courses/30/lessons/86971

class Solution {
    int[][] wires;
    int cnt = 0;
    int mini = Integer.MAX_VALUE;
    public int solution(int n, int[][] wires) {
        this.wires = wires;
        int[] arr = new int[n];
        for(int i = 0; i < wires.length; i++) {
            cnt = 0;
            dfs(arr, wires[i][1], i);
            int max = Math.max(arr.length - cnt, cnt);
            int min = Math.min(arr.length - cnt, cnt);
            mini = Math.min(mini, max - min);
            arr = new int[n];
        }
        return mini;
    }

    void dfs(int[] arr, int n, int n2) {
        if(arr[n - 1] == 1 || n == wires[n2][0])
            return;
        cnt++;
        arr[n - 1] = 1;
        for(int i = 0; i < wires.length; i++) {
            if(wires[i][0] == n) {
                dfs(arr, wires[i][1], n2);
            } else if(wires[i][1] == n) {
                dfs(arr, wires[i][0], n2);
            }
        }
    }
}
