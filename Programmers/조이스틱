https://school.programmers.co.kr/learn/courses/30/lessons/42860

# 그리디로는 안풀리지만 그리디에 있는 문제 컄ㅋㅋ
import java.util.*;

class Solution {
    int ans = Integer.MAX_VALUE;
    public int solution(String name) {
        HashSet<Integer> set = new HashSet<>();
        int answer = 0;

        int idx = 0;
        for (char ch : name.toCharArray()) {
            if (ch == 'A') set.add(idx);
            idx++;
        }

        // idx = 0;
        // while(true) {
        //     if (set.size() == name.length()) break;
        //     if (set.contains(idx)) {
        //         int min = Integer.MAX_VALUE;
        //         int pos = -1;
        //         for (int i = 0; i < name.length(); i++) {
        //             if (set.contains(i) || i == idx) continue;
        //             if (min > Math.abs(idx - i)) {
        //                 min = Math.abs(idx - i);
        //                 pos = i;
        //             }
        //             if (min > Math.abs(name.length() - Math.abs(idx - i))) {
        //                 min = Math.abs(name.length() - Math.abs(idx - i));
        //                 pos = i;
        //             }
        //         }
        //         idx = pos;
        //         answer += min;
        //         System.out.println("moving " + min + " " + pos);
        //     } else {
        //         System.out.println( Math.min(Math.abs('A' - name.charAt(idx)), Math.abs('Z' - 'A') + 1 - Math.abs('A' - name.charAt(idx))));
        //         answer += Math.min(Math.abs('A' - name.charAt(idx)), Math.abs('Z' - 'A') + 1 - Math.abs('A' - name.charAt(idx)));
        //         set.add(idx);
        //     }
        // }

        dfs(0, 0, set, name);
        return ans;
    }

    void dfs(int idx, int cnt, HashSet<Integer> set, String name) {
        cnt += Math.min(Math.abs('A' - name.charAt(idx)), Math.abs('Z' - 'A') + 1 - Math.abs('A' - name.charAt(idx)));
        set.add(idx);

        if (set.size() == name.length()) {
            ans = Math.min(cnt, ans);
            return;
        }

        for (int i = 0; i < name.length(); i++) {
            if (set.contains(i) || i == idx) continue;

            int min = Integer.MAX_VALUE;
            if (min > Math.abs(idx - i)) {
                min = Math.abs(idx - i);
            }
            if (min > Math.abs(name.length() - Math.abs(idx - i))) {
                min = Math.abs(name.length() - Math.abs(idx - i));
            }

            dfs(i, cnt + min, set, name);
            set.remove(i);
        }
    }
}