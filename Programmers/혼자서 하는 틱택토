https://school.programmers.co.kr/learn/courses/30/lessons/160585#

import java.util.*;

class Solution {
    int answer = 0;
    public int solution(String[] board) {
        char[][] arr = new char[board.length][board[0].length()];
        for (char[] cha : arr)
            Arrays.fill(cha, '.');

        if (check(arr, board) == 0) {
            answer = 1;
            return answer;
        }
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                dfs(i, k, board, arr, 0);
                arr[i][k] = '.';
            }
        }
        return answer;
    }

    void dfs(int a, int b, String[] board, char[][] arr, int cnt) {
        if (cnt % 2 == 0) {
            arr[a][b] = 'O';
        } else {
            arr[a][b] = 'X';
        }

        int cn2 = check2(arr, board);
        int cn = check(arr, board);
        if (cn == 0) {
            // System.out.println("hi");
            if (cn2 == -2) return;
            answer = 1;
            return;
        } else if (cn2 == 1 && cn != 0) {
            return;
        } else if (cn2 == -2) return;

        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                if (arr[i][k] != '.') continue;
                dfs(i, k, board, arr, cnt + 1);
                arr[i][k] = '.';
            }
        }
    }

    int check(char[][] arr, String[] board) {
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                if (arr[i][k] != board[i].charAt(k)) {
                    return -1;
                }
            }
        }
        return 0;
    }

    int check2(char[][] arr, String[] board) {
        int cnt = 0;
        int cnt2 = 0;
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++) {
                char target = arr[i][k];
                if (target == '.') continue;
                cnt2++;
                int a = 0, b = 0, c = 0, d = 0;
                for (int j = 0; j < 3; j++) {
                    if (i - j >= 0 && k + j < arr[0].length) {
                        if (arr[i - j][k + j] == target) a++;
                    }
                    if (i + j < arr.length && k + j < arr[0].length) {
                        if (arr[i + j][k + j] == target) b++;
                    }
                    if (k + j < arr[0].length) {
                        if (arr[i][k + j] == target) c++;
                    }
                    if (i + j < arr.length) {
                        if (arr[i + j][k] == target) d++;
                    }
                }

                if (a == 3) cnt++;
                if (b == 3) cnt++;
                if (c == 3) cnt++;
                if (d == 3) cnt++;
            }
        }
        // System.out.println(cnt);
        if (cnt2 == 9 && cnt == 2) return 1;
        if (cnt > 1) return -2;
        if (cnt == 1) return 1;
        return 0;
    }
}