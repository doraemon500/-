https://school.programmers.co.kr/learn/courses/30/lessons/64064#

import java.util.*;

class Solution {
    int answer = 0;
    HashSet<String> a_set = new HashSet<>();
    HashSet<String> b_set = new HashSet<>();

    public int solution(String[] user_id, String[] banned_id) {
        int[] visited = new int[user_id.length];

        HashSet<Integer> set = new HashSet<>();
        String bid = banned_id[0];
        int idx = 0;
        for (char ch : bid.toCharArray()) {
            if (ch == '*')
                set.add(idx);
            idx++;
        }

        for (int i = 0; i < user_id.length; i++) {
            String uid = user_id[i];
            char[] arr = uid.toCharArray();
            for (int k : set) {
                if (k >= arr.length) continue;
                arr[k] = '*';
            }
            String fuid = String.valueOf(arr);
            if (bid.equals(fuid)) {
                a_set.add(uid);
                dfs(i, 1, visited, user_id, banned_id);
                visited[i] = 0;
                a_set.remove(uid);
            }
        }

        return b_set.size();
    }

    void dfs(int n, int cnt, int[] visited, String[] user_id, String[] banned_id) {
        if (a_set.size() == banned_id.length) {
            String[] arr = a_set.toArray(new String[banned_id.length]);
            // String[] arr = a_set.toArray(new String[0]);
            Arrays.sort(arr);
            StringBuilder sb = new StringBuilder();
            for (String s : arr)
                sb.append(s).append(" ");
            b_set.add(sb.toString());
            return;
        }

        visited[n] = 1;

        HashSet<Integer> set = new HashSet<>();
        String bid = banned_id[cnt];
        int idx = 0;
        for (char ch : bid.toCharArray()) {
            if (ch == '*')
                set.add(idx);
            idx++;
        }

        for (int i = 0; i < user_id.length; i++) {
            if (visited[i] == 1) continue;
            String uid = user_id[i];
            char[] arr = uid.toCharArray();
            for (int k : set) {
                if (k >= arr.length) continue;
                arr[k] = '*';
            }
            String fuid = String.valueOf(arr);
            if (bid.equals(fuid)) {
                a_set.add(uid);
                dfs(i, cnt + 1, visited, user_id, banned_id);
                visited[i] = 0;
                a_set.remove(uid);
            }
        }
    }
}


좋은 질문입니다! 말씀하신 논리대로, 동일한 조건으로 배열을 정렬할 때 결과가 항상 동일하게 나와야 합니다. 그러나 문제가 발생할 수 있는 상황은 "정렬 조건"이 완전하지 않을 때입니다. 특히, 정렬 기준이 문자열의 일부만을 고려하거나 정렬 조건이 다를 경우, 배열의 순서가 기대와 다르게 나타날 수 있습니다. 이를 통해 문제가 발생할 수 있는 구체적인 예시를 살펴보겠습니다.

### 예시: 부분적인 기준에 의한 정렬의 문제

먼저, 아래와 같은 `user_id` 배열을 가정해 보겠습니다:

```java
String[] arr = {"frodo", "fradi", "crodo", "abc123"};
```

이 배열을 정렬한다고 가정해 봅시다.

#### 1. `Arrays.sort(arr)` (전체 문자열을 기준으로 사전순 정렬):

```java
Arrays.sort(arr);
```

이 정렬은 문자열 전체를 기준으로 사전순으로 정렬합니다. 결과는 다음과 같이 됩니다:

- 결과: `["abc123", "crodo", "fradi", "frodo"]`

이 경우, 배열의 각 요소가 전체 문자열을 기준으로 완전하게 정렬되었기 때문에, 동일한 배열에 대해 동일한 결과가 항상 나옵니다.

#### 2. `Arrays.sort(arr, (a, b) -> a.charAt(0) - b.charAt(0));` (첫 글자만을 기준으로 정렬):

```java
Arrays.sort(arr, (a, b) -> a.charAt(0) - b.charAt(0));
```

이 정렬은 각 문자열의 첫 번째 문자만을 기준으로 정렬합니다. 첫 글자가 동일한 경우에는 순서를 변경하지 않습니다.

이 정렬의 결과는 다음과 같이 나올 수 있습니다:

- 결과: `["abc123", "crodo", "frodo", "fradi"]`

이 경우, `"frodo"`와 `"fradi"`는 첫 글자가 같기 때문에 둘 사이의 순서는 원래의 배열 순서에 의존합니다.

#### 차이점 요약:

- **첫 글자 기준 정렬의 문제**: `"frodo"`와 `"fradi"`는 첫 번째 문자가 같아서, `Arrays.sort(arr, (a, b) -> a.charAt(0) - b.charAt(0));`는 이 둘의 순서를 원래 배열에 의존하게 됩니다. 따라서 이 정렬 결과는 원래 배열의 순서에 따라 달라질 수 있습니다.

- **전체 문자열 기준 정렬의 일관성**: 전체 문자열을 기준으로 정렬하는 `Arrays.sort(arr)`는 모든 문자들을 고려하여 일관된 결과를 제공합니다. 동일한 요소들이 있는 배열에 대해서는 항상 동일한 결과를 반환합니다.

### 정렬 기준이 완전하지 않은 경우 발생하는 문제:

`Arrays.sort(arr, (a, b) -> a.charAt(0) - b.charAt(0));`와 같이 정렬 기준이 일부 문자(첫 번째 문자)에만 의존하면, 그 결과는 완전하지 않으며, 동일한 첫 글자를 가진 문자열들이 원래의 배열 순서에 따라 정렬됩니다. 이는 동일한 내용물이더라도 서로 다른 순서를 가질 수 있는 가능성을 남깁니다.

이로 인해, 동일한 요소가 들어 있는 배열이라도, 원래의 순서가 다르면 결과 배열의 순서도 달라질 수 있습니다. 따라서, 이러한 경우 정렬 후 중복 제거 시 문제가 발생할 수 있습니다.

### 정리:

- **정렬 기준이 완전할 때** (예: `Arrays.sort(arr)`): 동일한 배열에 대해 항상 일관된 결과가 나오므로 중복 제거가 정확하게 이루어집니다.
- **정렬 기준이 부분적일 때** (예: `Arrays.sort(arr, (a, b) -> a.charAt(0) - b.charAt(0));`): 동일한 첫 글자를 가진 문자열들이 원래 배열의 순서에 의존하여 정렬되므로, 배열의 원래 순서가 달라지면 정렬 결과도 달라질 수 있습니다. 이로 인해 중복 제거 시 문제가 발생할 수 있습니다.

따라서, 배열을 정렬할 때는 항상 문자열 전체를 고려한 완전한 정렬 기준을 사용하는 것이 중요합니다. 그렇지 않으면 동일한 배열에서도 서로 다른 정렬 결과가 나올 수 있으며, 이로 인해 중복이 제대로 제거되지 않는 문제가 발생할 수 있습니다.